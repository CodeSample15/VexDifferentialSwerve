{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor motor1 = motor(PORT11, false);\nmotor motor2 = motor(PORT12, false);\ncontroller Controller = controller();\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n#include <math.h>\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid debug() {\n  while (true) {\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"Motor1: %f\", motor1.position(degrees));\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.print(\"Motor2: %f\", motor2.position(degrees));\n    \n    wait(10, msec);\n\n    Brain.Screen.clearScreen();\n  }\n}\n\nclass hub {\n  private:\n    motor* m1;\n    motor* m2;\n\n    float targetRot;\n    float driveSpeed;\n\n  public:\n    //constructor\n    hub(motor& m1, motor& m2) {\n      hub::m1 = &m1;\n      hub::m2 = &m2;\n\n      m1.setPosition(0, degrees);\n      m2.setPosition(0, degrees);\n\n      targetRot = 0;\n      driveSpeed = 0;\n    }\n\n    //movement functions\n    void spinTo(float rot) {\n      hub::targetRot = rot;\n    }\n\n    float pid(float error) {\n      //just a p loop for now, might expand on it if necessary\n      wait(20, msec);\n\n      //deadzone\n      if(error < 5)\n        return 0;\n\n      return error * 0.9;\n    }\n\n    void update() {\n      //hold the position of the two motors relative to each other in order to control turning the wheel. DOES NOT CONTROL SPINNING\n      motor temp1 = *hub::m1;\n      motor temp2 = *hub::m2;\n\n      float offset = targetRot * 0.88;\n      float target1 = (temp2.position(degrees)-temp1.position(degrees)) - offset;\n      float target2 = offset - (temp1.position(degrees)-temp2.position(degrees));\n\n      temp1.setVelocity(hub::driveSpeed - target1, percent);\n      temp2.setVelocity(hub::driveSpeed - target2, percent);\n\n      temp1.spin(reverse);\n      temp2.spin(reverse); //change back to rev\n\n      wait(15, msec);\n    }\n};\n\nint main() {\n  thread t(debug);\n\n  hub front(motor1, motor2);\n\n\n\n  while(true) {\n    float x = Controller.AxisB.position();\n    float y = Controller.AxisA.position();\n\n    float rot = atan2(y, x);\n    \n    front.spinTo(rot);\n    front.update();\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[11],"name":"motor1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"motor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}